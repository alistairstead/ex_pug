name: CI

on:
  push:
    branches: ["*"]
  pull_request:
    branches: ["*"]

env:
  MIX_ENV: test

jobs:
  verify:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        otp: [23.0.3]
        elixir: [1.10.4]

    steps:
      # Environment
      - uses: actions/checkout@v2
      - uses: actions/setup-elixir@v1
        with:
          otp-version: ${{ matrix.otp }}
          elixir-version: ${{ matrix.elixir }}

      # Cache
      - name: Restore deps (Elixir) cache
        uses: actions/cache@v1
        id: mix-deps-cache
        with:
          path: deps
          key: ${{ runner.os }}-deps-${{ matrix.otp }}-${{ matrix.elixir }}-${{ hashFiles(format('{0}{1}', github.workspace, '/mix.lock')) }}

      - name: Restore _build (Elixir) cache
        uses: actions/cache@v1
        id: mix-build-cache
        with:
          path: _build
          key: ${{ runner.os }}-build-${{ matrix.otp }}-${{ matrix.elixir }}-${{ hashFiles(format('{0}{1}', github.workspace, '/mix.lock')) }}

      - name: Restore mix (Elixir) cache
        uses: actions/cache@v1
        with:
          path: ~/.mix
          key: ${{ runner.os }}-mix-${{ matrix.otp }}-${{ matrix.elixir }}-${{ hashFiles(format('{0}{1}', github.workspace, '/mix.lock')) }}

      # Setup
      - name: Install mix dependencies
        if: steps.mix-deps-cache.outputs.cache-hit != 'true'
        run: mix deps.get

      # Test
      - name: Check Formatting
        run: mix format --check-formatted

      - name: Run Credo
        run: mix credo --strict

      - name: Elixir deps audit
        run: mix hex.audit

      - name: Elixir deps outdated
        run: mix hex.outdated

      - name: Test Elixir
        run: mix test

      - name: Create PLTs
        if: steps.mix-build-cache.outputs.cache-hit != 'true'
        run: mix dialyzer --plt

      - name: Run dialyzer
        run: mix dialyzer --no-check
